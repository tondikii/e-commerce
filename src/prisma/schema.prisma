// schema.prisma - Updated with Cascade Delete
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  password      String
  name          String?
  phoneNumber   String?         @db.VarChar(15)
  isAdmin       Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  addresses     ShippingAddress[]
  carts         Cart[]
  orders        Order[]
  reviews       ProductReview[]
}

model Product {
  id            Int               @id @default(autoincrement())
  name          String            @db.VarChar(50)
  description   String           @db.VarChar(255)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  images        ProductImage[]
  category      Category?           @relation(fields: [categoryId], references: [id])
  categoryId    Int?

  collection    Collection?           @relation(fields: [collectionId], references: [id])
  collectionId  Int?

  variants      ProductVariant[]
  reviews       ProductReview[]
}

model ProductVariant {
  id              Int               @id @default(autoincrement())
  sku             String            @unique @db.VarChar(20)
  price           Int
  stock           Int               @default(0)
  optionValues    Json
  productId       Int
  product         Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]
  cartItems       CartItem[]
  
  @@index([sku])
  @@map("product_variants")
}

model ProductImage {
  id          Int       @id @default(autoincrement())
  url         String    @db.VarChar(255)
  altText     String?   @db.VarChar(50)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  products    Product[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model Collection {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  products    Product[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model Order {
  id              Int             @id @default(autoincrement())
  orderNumber     String          @unique
  user            User            @relation(fields: [userId], references: [id])
  userId          Int
  items           OrderItem[]
  shippingAddress ShippingAddress @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId Int
  shippingCost    Int             @default(0)
  totalAmount     Int
  status          OrderStatus     @default(PENDING)
  payment         Payment?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model OrderItem {
  id          Int             @id @default(autoincrement())
  order       Order           @relation(fields: [orderId], references: [id])
  orderId     Int
  variant     ProductVariant  @relation(fields: [variantId], references: [id])
  variantId   Int
  quantity    Int
  price       Int
}

model ShippingAddress {
  id          Int       @id @default(autoincrement())
  recipient   String    @db.VarChar(100)
  phone       String    @db.VarChar(15)
  address     String    @db.VarChar(255)
  province    String    @db.VarChar(50)
  city        String    @db.VarChar(50)
  postalCode  String    @db.VarChar(5)
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  orders      Order[]
}

model Payment {
  id              String      @id @default(uuid())
  order           Order       @relation(fields: [orderId], references: [id])
  orderId         Int         @unique
  amount          Int
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  snapToken       String?
  vaNumber        String?
  bank            String?
  expiryAt        DateTime?
  paidAt          DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Cart {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  items       CartItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model CartItem {
  id          Int             @id @default(autoincrement())
  quantity    Int             @default(1)
  cart        Cart            @relation(fields: [cartId], references: [id])
  cartId      Int
  variant     ProductVariant  @relation(fields: [variantId], references: [id])
  variantId   Int
}

model ProductReview {
  id          Int       @id @default(autoincrement())
  rating      Int
  comment     String?
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime  @default(now())
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  BANK_TRANSFER
  GOPAY
  SHOPEEPAY
  QRIS
  CREDIT_CARD
  ALFAMART
  INDOMARET
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  EXPIRED
  REFUNDED
}